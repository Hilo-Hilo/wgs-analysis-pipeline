name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release-tag: ${{ steps.get-version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog
    
    - name: Get version
      id: get-version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "Generating changelog for ${{ steps.get-version.outputs.version }}"
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [[ -z "$PREV_TAG" ]]; then
          echo "No previous tag found, including all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Previous tag: $PREV_TAG"
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        # WGS Pipeline ${{ steps.get-version.outputs.version }}
        
        ## What's New
        
        This release includes improvements to the 16GB RAM optimized whole genome sequencing analysis pipeline.
        
        ## Changes
        
        $CHANGELOG
        
        ## Installation
        
        ### Docker (Recommended)
        \`\`\`bash
        docker pull ghcr.io/${{ github.repository }}:${{ steps.get-version.outputs.version }}
        \`\`\`
        
        ### From Source
        \`\`\`bash
        git clone https://github.com/${{ github.repository }}.git
        cd wgs-analysis-pipeline
        git checkout ${{ steps.get-version.outputs.version }}
        ./scripts/check_requirements.sh
        \`\`\`
        
        ## Quick Start
        
        See [GETTING_STARTED.md](GETTING_STARTED.md) for detailed instructions.
        
        ## System Requirements
        
        - 16GB RAM (optimized configuration)
        - 400GB+ disk space
        - 4+ CPU cores
        - Linux, macOS, or Windows with WSL/Docker
        
        ## Support
        
        - 📖 Documentation: See README.md and guides in the repository
        - 🐛 Issues: https://github.com/${{ github.repository }}/issues
        - 💬 Discussions: https://github.com/${{ github.repository }}/discussions
        EOF
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get-version.outputs.version }}
        release_name: WGS Pipeline ${{ steps.get-version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.get-version.outputs.version, '-') }}

  # Build and push Docker images
  docker-release:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_VERSION=${{ needs.create-release.outputs.release-tag }}
          VCS_REF=${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Run release tests
  release-test:
    name: Test Release
    runs-on: ubuntu-latest
    needs: [docker-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test released Docker image
      run: |
        echo "🧪 Testing released Docker image..."
        
        # Pull the released image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Test basic functionality
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          check_requirements.sh --help
        
        # Test that all tools are available
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest bash -c "
          source activate wgs_analysis &&
          echo 'Testing tool availability...' &&
          fastqc --version &&
          fastp --version &&
          bwa 2>&1 | head -1 &&
          samtools --version | head -1 &&
          bcftools --version | head -1 &&
          echo '✅ All tools available!'
        "
        
        echo "🎉 Release tests passed!"

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update version references
      run: |
        VERSION=${{ needs.create-release.outputs.release-tag }}
        echo "Updating documentation for version $VERSION"
        
        # Update Docker references in README
        sed -i "s|ghcr.io/${{ github.repository }}:.*|ghcr.io/${{ github.repository }}:$VERSION|g" README.md
        
        # Update any version references in documentation
        find . -name "*.md" -not -path "./.git/*" -exec \
          sed -i "s/wgs-pipeline:latest/wgs-pipeline:$VERSION/g" {} +
        
        echo "📝 Documentation updated with version $VERSION"
    
    - name: Commit documentation changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No documentation changes to commit"
        else
          git add .
          git commit -m "docs: update version references to ${{ needs.create-release.outputs.release-tag }}"
          git push
          echo "📚 Documentation changes committed"
        fi

  # Notify on success
  notify:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [create-release, docker-release, release-test, update-docs]
    if: success()
    
    steps:
    - name: Notify success
      run: |
        echo "🎉 Release ${{ needs.create-release.outputs.release-tag }} completed successfully!"
        echo "✅ GitHub release created"
        echo "✅ Docker images built and pushed"
        echo "✅ Release tests passed"
        echo "✅ Documentation updated"
        
        echo "Release available at:"
        echo "- GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.release-tag }}"
        echo "- Docker: ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.release-tag }}"